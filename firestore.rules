rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow create: if isSignedIn();
	  allow update: if isSignedIn() && request.auth.uid == userId
      allow read, write: if isSignedIn();
//	  allow update: if existingData().locked == false && getUserData().roles.keys().hasAll(['editor', 'admin']);
	  allow delete: if false;
	}

	match /companies/{companyId} {
	  allow create: if isSignedIn();
      allow read, write: if isSignedIn() && getUserData().company == companyId;
	}

	match /invitations/{invitationId} {
	 allow create: if isSignedIn() && hasAuthority("canWriteThat");
	 allow read: if isSignedIn() && hasAuthority("canReadThis");
	 allow write: if isSignedIn() && hasAuthority("canWriteThat");
	}
	// Functions //
	  function isSignedIn() {
		return request.auth != null;
	  }

	  function hasAuthority(authority) {
		  return authority in request.auth.token.authorities
	  }

	  // authorities - is array of strings
	  function hasAuthorities(authorities) {
		  return request.auth.token.authorities.hasAll(authorities)
	  }

	  function isOwner(id) {
		return request.auth.uid == id;
	  }

	  function emailVerified() {
		return request.auth.token.email_verified;
	  }

	  function isAnonymous() {
		return request.auth.token.isAnonymous;
	  }

	  function existingData() {
		return resource.data;
	  }

	  function requestData() {
		return request.resource.data;
	  }

	  function getUserData() {
		return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
	  }

	  function getCompanyData() {
		return get(/databases/$(database)/documents/companies/$(request.auth.uid)).data;
	  }
  }
}
